################################################################################
#
# RevBayes Validation Test: Constant-rate birth-death process
# 
# Model: A constant-rate birth-death process with uniform taxon sampling. 
#            
#
# authors: Sebastian Hoehna
#
################################################################################

#######################
# Reading in the Data #
#######################

observed_phylogeny <- readTrees( "data/primates.tree" )[1]

# Get the names of the taxa in the tree and the age of the tree. We need these later on.
taxa <- observed_phylogeny.taxa()
n_taxa <- observed_phylogeny.ntips()

# initialize the moves and monitors vectors
moves = VectorMoves()
monitors = VectorMonitors()



##############
# Tree model #
##############

pop_size ~ dnUniform(0,1E3)
moves.append( mvScale(pop_size, lambda=0.1, tune=true, weight=2.0) )


### the time tree is a stochastic node modeled by the constant-rate coalescent process (dnCoalescent)
psi ~ dnCoalescent(theta=pop_size, taxa=taxa)
psi.clamp( observed_phylogeny )

#############
# The Model #
#############


### workspace model wrapper ###
mymodel = model(psi)

### set up the monitors that will output parameter values to file and screen 
monitors.append( mnModel(filename="output/coal_skyline_fixed.log",printgen=1, separator = TAB) )
monitors.append( mnScreen(printgen=1, pop_size) )



################
# The Analysis #
################

mymcmc = mcmc(mymodel, monitors, moves)


validation = validationAnalysis( mymcmc, 1000 )
validation.burnin(generations=2000,tuningInterval=200)
validation.run(generations=10000)
validation.summarize()


# you may want to quit RevBayes now
q()

