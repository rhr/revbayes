################################################################################
#
# RevBayes Validation Test: Ornstein-Uhlenbeck on a fixed tree
# 
# Model: Continuous character(s) evolve under Ornstein-Uhlenbeck model.
#            
#
# authors: Sebastian Hoehna
#
################################################################################

#######################
# Reading in the Data #
#######################

###### This just defines a single model for all sites #######

### Read in sequence data for both genes

data <- readContinuousCharacterData("data/primates_lhtlog.nex")

data.excludeAll()
data.includeCharacter(1) 

# Get some useful variables from the data. We need these later on.
taxa <- data.taxa()

# set my move index
mvi = 0



#######################
# OU-Model Parameters #
#######################


sigma ~ dnLognormal( ln(10.0), sd=0.587405 )
optimum ~ dnUniform(-10,10)
root_state ~ dnUniform(-10,10)
attraction ~ dnExponential(1.0)

moves[++mvi] = mvScale(sigma, lambda=1.0, tune=true, weight=2.0) 
moves[++mvi] = mvSlide(optimum, delta=1.0, tune=true, weight=2.0) 
moves[++mvi] = mvSlide(root_state, delta=1.0, tune=true, weight=2.0) 
moves[++mvi] = mvScale(attraction, lambda=1.0, tune=true, weight=2.0) 



##############
# Tree model #
##############


psi <- readTrees( "data/primates.tree" )[1]




###################
# PhyloCTMC Model #
###################

# We use an empirical estimate of the clock rate which is 0.01 (=1%) per mvillion years per site
traits ~ dnPhyloOrnsteinUhlenbeckREML(psi, sigma=sigma, alpha=attraction, theta=optimum, rootState=root_state, nSites=1)

# attach the data
traits.clamp(data)




#############
# THE Model #
#############

# We define our model.
# We can use any node of our model as a handle, here we chose to use the rate matrix.
mymodel = model(psi)






monitors[1] = mnModel(filename="output/primates_OU.log",printgen=10, separator = TAB)

mymcmc = mcmc(mymodel, monitors, moves)


validation = validationAnalysis( mymcmc, 2000 )
validation.burnin(generations=2000,tuningInterval=100)
validation.run(generations=5000)
validation.summarize()


# you may want to quit RevBayes now
q()

